{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: RT assay\n",
        "description: Simulate the RT assay of Q's group with our model\n",
        "authors:\n",
        "  - name: Nicholas Harbour\n",
        "  - name: Markus Owen\n",
        "format: \n",
        "  html:\n",
        "    embed-resources: true\n",
        "    code-fold: true\n",
        "    code-tools: true\n",
        "    highlight-style: atom-one\n",
        "    number-sections: true\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    date: now\n",
        "    date-modified: last-modified\n",
        "    date-format: \"MMMM DD, YYYY, HH:mm:ss\"\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "# Import packages\n"
      ],
      "id": "c8d33cd0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Import_packages\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import lognorm\n",
        "import matplotlib.colors as mcolors\n",
        "from scipy.optimize import minimize"
      ],
      "id": "Import_packages",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# import functions\n",
        "\n",
        "all functions are in: \"notebooks/gsc_model_functions.py\"\n"
      ],
      "id": "4d86c030"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: import_functions\n",
        "\n",
        "import gsc_model_functions as gmf"
      ],
      "id": "import_functions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Load the data\n"
      ],
      "id": "e15aadec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# doubling time data\n",
        "doubling_time_data = pd.read_csv(\"Data/Growth_rate_raw_data.csv\")\n",
        "# fitted proliferation rates to the doubling time\n",
        "fitted_pro_rates = pd.read_csv(\"Data/Pro_rates_fitted.csv\")\n",
        "# RT survival data (with normalised pe)\n",
        "rt_df = pd.read_csv(\"Data/rt_df.csv\")\n",
        "# psi fits\n",
        "psi_fits = pd.read_csv(\"Data/fitted_psi_value.csv\")\n"
      ],
      "id": "ee313913",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Simulations of radiotherapy assays.\n",
        "\n",
        "We have experimental doubling times for some of the cell lines GBM1a, QS120, QNS108, QNS315, QNS657, QNS522b. This means we can simulate the RT assay, where cells where grown for 2 days under different conditions and then undergo RT.\n",
        "\n",
        "\n",
        "## GBM1a \n",
        "\n",
        "doubling time is 54.71329hrs (2.27days) according to this the growth should be \n",
        "\n",
        "$$\n",
        "    N(t) = N_0 2^{t/T}\n",
        "$$\n"
      ],
      "id": "a5acf87c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "s0 = 0.1\n",
        "N = s0*2**(48/54.71329)\n",
        "print(\"Expected size of colon after 48hrs for GMB1a\")\n",
        "print(N)"
      ],
      "id": "0dbe9ea3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cline = \"GBM1a\"\n",
        "\n",
        "### import params\n",
        "from gsc_model_params import *\n",
        "\n",
        "### override some parameters ###\n",
        "Ps_max = 1 # Max probability of self renewal\n",
        "Ps_min = 0 \n",
        "\n",
        "s0 = 0.1 # Initial GSCs\n",
        "dt = 0.01 # time step\n",
        "t_rad = 2 # time of radiotherapy\n",
        "t_assay = dt # time of assay after radiotherapy\n",
        "t_final = t_rad + t_assay\n",
        "\n",
        "RT_doses = [0,2,4,6] # diffent doses of radiation used in assay\n",
        "psi_values = [0,psi_fits[psi_fits[\"cline\"]==cline][\"Psi_10\"].iloc[0]] # estimated psi value \n",
        "psi_colors = list(mcolors.TABLEAU_COLORS)\n",
        "\n",
        "BMP4_dose = 10 # bmp4 dose is now fixed\n",
        "\n",
        "nRT = len(RT_doses) # number of RT doses\n",
        "npsi = len(psi_values) # number of BMP4 doses\n",
        "\n",
        "# to store time and tumor size at RT and survival assay\n",
        "RT_pre_size = np.zeros((nRT,npsi))\n",
        "RT_pre_t = np.zeros((nRT,npsi))\n",
        "RT_post_size = np.zeros((nRT,npsi))\n",
        "RT_post_t = np.zeros((nRT,npsi))\n",
        "assay_size = np.zeros((nRT,npsi))\n",
        "assay_t = np.zeros((nRT,npsi))\n",
        "\n",
        "#pro_rate = m_s_estimate.x\n",
        "pro_rate = fitted_pro_rates[fitted_pro_rates[\"cline\"] == cline][\"pro_rate\"].iloc[0] # value from the fit\n",
        "\n",
        "# Define proliferation rates for the diffent cell pops\n",
        "mv = mv_rho_scale*pro_rate*np.ones(n) \n",
        "ms = ms_mv_scale*mv[0]\n",
        "mv[n-1] = 0 \n",
        "\n",
        "# calc alpha as proportional to rho\n",
        "#alpha = gmf.calc_alpha_from_rho(pro_rate, alpha_rho_scale)\n",
        "#beta = gmf.calc_beta(alpha, ratio=3)\n",
        "\n",
        "# According to the RT data fits for GBM1a we get\n",
        "#alpha = 0.1831989172651574 / eta\n",
        "#beta = 0.08989100165103327 / eta\n",
        "\n",
        "# Assuming alpha/beta = 10 fixed\n",
        "alpha = 0.33841873 / eta\n",
        "beta = (0.33841873/10) / eta\n",
        "\n",
        "# set up time grid\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "nt = len(t)\n",
        "\n",
        "# set up array to store model solution\n",
        "u_all = []\n",
        "VS_all = []\n",
        "N_all = []\n",
        "\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        # set up array to store model solution\n",
        "        u = np.zeros((nt,n+1))\n",
        "        VS = np.zeros(nt)\n",
        "        N = np.zeros(nt)\n",
        "\n",
        "        # define IC\n",
        "        u[0,0] = s0\n",
        "        VS[0] = np.sum(u[0,1:n+1]) # sum the 1th to nth entries\n",
        "        N[0] = u[0,0] + VS[0]\n",
        "\n",
        "        i = 0\n",
        "        while t[i] < t_final:\n",
        "                if t[i] <= t_rad : \n",
        "                    Ps = Ps_min + (Ps_max - Ps_min)*(1 / (1 + psi_values[ipsi]*BMP4_dose))\n",
        "                else : \n",
        "                    Ps = Ps_max\n",
        "\n",
        "                u[i+1,:] = u[i,:] + dt * gmf.gsc_model_dudt(u[i,:],n,Ps,k,ms,mv,delta_s,delta_v)\n",
        "                # apply radiation\n",
        "                if t[i] == t_rad :\n",
        "                    u[i+1,:] = gmf.radiation(u[i+1,:],alpha,beta,eta,mu,d=RT_doses[j])\n",
        "                    RT_pre_size[j,ipsi] = np.sum(u[i,:])\n",
        "                    RT_pre_t[j,ipsi] = t[i]        \n",
        "                    RT_post_size[j,ipsi] = np.sum(u[i+1,:])\n",
        "                    RT_post_t[j,ipsi] = t[i+1]        \n",
        "                    \n",
        "                VS[i+1] = np.sum(u[i+1,1:n+1])\n",
        "                N[i+1] = u[i+1,0] + VS[i+1]\n",
        "                            \n",
        "                i = i + 1\n",
        "\n",
        "        u_all.append(u)\n",
        "        VS_all.append(VS)\n",
        "        N_all.append(N)\n",
        "        #print(\"Actuall size after 48hrs\")\n",
        "        #print(N[-2]) # need to print second last item as the last one has had RT applied\n",
        "\n",
        "print(\"Stem cell fraction just before RT\")\n",
        "print(1- VS[-2]/N[-2])   \n",
        "print(\"According to DLQ stem cell fraction should be\")\n",
        "print(0.57068221)"
      ],
      "id": "8d5a0a7d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axs = plt.subplots(2, sharex=True)\n",
        "w = 0\n",
        "BMP4_colors = list(mcolors.TABLEAU_COLORS)\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        axs[1].plot(t,1 - VS_all[w]/N_all[w], psi_colors[ipsi], alpha=1) \n",
        "        axs[0].plot(t,N_all[w],psi_colors[ipsi], alpha = 0.25)\n",
        "\n",
        "        axs[0].plot(RT_pre_t[j,ipsi],RT_pre_size[j,ipsi],'r*',label='_nolegend_', markersize = 7)\n",
        "        axs[0].plot(RT_post_t[j,ipsi],RT_post_size[j,ipsi],'g*',label='_nolegend_', markersize = 7)\n",
        "\n",
        "        w = w + 1\n",
        "\n",
        "axs[1].set_xlabel(\"Time (days)\", fontsize=14)\n",
        "axs[1].set_ylabel(\"Stem fraction\", fontsize=14)\n",
        "axs[0].set_ylabel(\"Tumour density\", fontsize=14)\n",
        "#fig.suptitle(\"Simulated RT assay\")\n",
        "leg = axs[0].legend([r\"$\\psi = 0$\", fr\"$\\psi = {psi_values[1]:.3g}$\"], loc='upper left',fontsize=12)\n",
        "leg.legend_handles[0].set_color('tab:blue')\n",
        "leg.legend_handles[1].set_color('tab:orange')\n",
        "#leg.legend_handles[2].set_color('tab:green')\n",
        "#leg.legend_handles[3].set_color('tab:red')\n",
        "#leg.legend_handles[4].set_color('tab:purple')\n",
        "leg.legend_handles[0].set_alpha(1)\n",
        "leg.legend_handles[1].set_alpha(1)\n",
        "#leg.legend_handles[2].set_alpha(1)\n",
        "#leg.legend_handles[3].set_alpha(1)\n",
        "#leg.legend_handles[4].set_alpha(1)\n",
        "# Increase font size of x-ticks and y-ticks\n",
        "axs[0].tick_params(axis='both', which='major', labelsize=14)\n",
        "axs[1].tick_params(axis='both', which='major', labelsize=14)\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"png/simulated_RT_assay_GBM1a.png\")\n",
        "plt.savefig(\"svg/simulated_RT_assay_GBM1a.svg\")\n",
        "plt.show()"
      ],
      "id": "f188c116",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot with the real data."
      ],
      "id": "65f6be73"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# plot the data\n",
        "plt.figure()\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"CTRL\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"CTRL\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"BMP4\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"BMP4\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "\n",
        "RT_to_plot = RT_post_size/RT_post_size[0,:]\n",
        "#plt.plot(RT_doses,RT_post_size/RT_post_size[0,:],'-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,0],'b-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,1],'-*', color='orange')\n",
        "\n",
        "# Create legend and adjust its transparency\n",
        "legend = plt.legend([\"CTRL data\", \"BMP4 data\", \"CTRL fit\", \"BMP4 fit\"], fontsize=12)\n",
        "for lh in legend.legend_handles:\n",
        "    lh.set_alpha(0.5)  # Set full opacity for legend entries\n",
        "plt.xlabel(\"Dose (Gy)\",fontsize=14)\n",
        "plt.ylabel(\"Normalised surving fraction\", fontsize=14)\n",
        "plt.yscale('log')\n",
        "ticks = [0.01,0.02,0.05,0.1,0.2,0.5,1]\n",
        "ticks_str = list(map(str, ticks)) # Convert each number to a string\n",
        "plt.yticks(ticks, ticks_str,fontsize=14)\n",
        "plt.xticks(fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"png/simulated_dose_response_GBM1a.png\")\n",
        "plt.savefig(\"svg/simulated_dose_response_GBM1a.svg\")\n",
        "plt.show()"
      ],
      "id": "806bc784",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QNS120\n",
        "\n",
        "doubling time is 43.5243hrs (1.8135125days) according to this the growth should be \n",
        "\n",
        "$$\n",
        "    N(t) = N_0 2^{t/T}\n",
        "$$\n"
      ],
      "id": "f224701a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "N = s0*2**(48/43.5243)\n",
        "print(\"Expected size of colon after 48hrs for GMB1a\")\n",
        "print(N)"
      ],
      "id": "7629ab7f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cline = \"QNS120\"\n",
        "\n",
        "#pro_rate = m_s_estimate.x\n",
        "pro_rate = fitted_pro_rates[fitted_pro_rates[\"cline\"] == cline][\"pro_rate\"].iloc[0] # value from the fit\n",
        "\n",
        "t_final = t_rad + t_assay\n",
        "\n",
        "# Define proliferation rates for the diffent cell pops\n",
        "mv = mv_rho_scale*pro_rate*np.ones(n) \n",
        "ms = ms_mv_scale*mv[0]\n",
        "mv[n-1] = 0 \n",
        "\n",
        "\n",
        "# According to the RT data fits for QNS120 we get\n",
        "#alpha = 0.014037184418926985 / eta \n",
        "#beta =  0.03455851742606245 / eta\n",
        "\n",
        "# Assuming alpha/beta = 10 fixed\n",
        "alpha = 0.11569914 / eta\n",
        "beta = (0.11569914/10) / eta\n",
        "\n",
        "psi_values = [0,psi_fits[psi_fits[\"cline\"]==cline][\"Psi_10\"].iloc[0]] # different values of psi used in assay\n",
        "\n",
        "# set up time grid\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "nt = len(t)\n",
        "\n",
        "\n",
        "# set up array to store model solution\n",
        "u_all = []\n",
        "VS_all = []\n",
        "N_all = []\n",
        "\n",
        "\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        # set up array to store model solution\n",
        "        u = np.zeros((nt,n+1))\n",
        "        VS = np.zeros(nt)\n",
        "        N = np.zeros(nt)\n",
        "\n",
        "        # define IC\n",
        "        u[0,0] = s0\n",
        "        VS[0] = np.sum(u[0,1:n+1]) # sum the 1th to nth entries\n",
        "        N[0] = u[0,0] + VS[0]\n",
        "\n",
        "        i = 0\n",
        "        while t[i] < t_final:\n",
        "                if t[i] <= t_rad : \n",
        "                    Ps = Ps_min + (Ps_max - Ps_min)*(1 / (1 + psi_values[ipsi]*BMP4_dose))\n",
        "                else : \n",
        "                    Ps = Ps_max\n",
        "\n",
        "                u[i+1,:] = u[i,:] + dt * gmf.gsc_model_dudt(u[i,:],n,Ps,k,ms,mv,delta_s,delta_v)\n",
        "                # apply radiation\n",
        "                if t[i] == t_rad :\n",
        "                    u[i+1,:] = gmf.radiation(u[i+1,:],alpha,beta,eta,mu,d=RT_doses[j])\n",
        "                    RT_pre_size[j,ipsi] = np.sum(u[i,:])\n",
        "                    RT_pre_t[j,ipsi] = t[i]        \n",
        "                    RT_post_size[j,ipsi] = np.sum(u[i+1,:])\n",
        "                    RT_post_t[j,ipsi] = t[i+1]        \n",
        "                    \n",
        "                VS[i+1] = np.sum(u[i+1,1:n+1])\n",
        "                N[i+1] = u[i+1,0] + VS[i+1]\n",
        "                            \n",
        "                i = i + 1\n",
        "\n",
        "        u_all.append(u)\n",
        "        VS_all.append(VS)\n",
        "        N_all.append(N)\n",
        "        #print(\"Actuall size after 48hrs\")\n",
        "        #print(N[-2]) # need to print second last item as the last one has had RT applied\n",
        "\n",
        "print(\"Stem cell fraction just before RT\")\n",
        "print(1- VS[-2]/N[-2])    \n",
        "\n",
        "print(\"According to DLQ stem cell fraction should be\")\n",
        "print(0.76976374)"
      ],
      "id": "ebff006b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axs = plt.subplots(2, sharex=True)\n",
        "w = 0\n",
        "BMP4_colors = list(mcolors.TABLEAU_COLORS)\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        axs[1].plot(t,1 - VS_all[w]/N_all[w], psi_colors[ipsi], alpha=0.25) \n",
        "        axs[0].plot(t,N_all[w],psi_colors[ipsi], alpha = 0.5)\n",
        "\n",
        "        axs[0].plot(RT_pre_t[j,ipsi],RT_pre_size[j,ipsi],'r*',label='_nolegend_')\n",
        "        axs[0].plot(RT_post_t[j,ipsi],RT_post_size[j,ipsi],'g*',label='_nolegend_')\n",
        "\n",
        "        w = w + 1\n",
        "\n",
        "axs[1].set(xlabel=\"Time (days)\")\n",
        "axs[1].set(ylabel=\"Stem fraction\")\n",
        "axs[0].set(ylabel=\"Tumour density\")\n",
        "fig.suptitle(\"Simulated RT assay\")\n",
        "leg = axs[0].legend([r\"$\\psi = 0$\",fr\"$\\psi = {psi_values[1]}$\"], loc='upper left')\n",
        "leg.legend_handles[0].set_color('tab:blue')\n",
        "leg.legend_handles[1].set_color('tab:orange')\n",
        "#leg.legend_handles[2].set_color('tab:green')\n",
        "#leg.legend_handles[3].set_color('tab:red')\n",
        "#leg.legend_handles[4].set_color('tab:purple')\n",
        "leg.legend_handles[0].set_alpha(1)\n",
        "leg.legend_handles[1].set_alpha(1)\n",
        "#leg.legend_handles[2].set_alpha(1)\n",
        "#leg.legend_handles[3].set_alpha(1)\n",
        "#leg.legend_handles[4].set_alpha(1)\n",
        "plt.tight_layout()\n",
        "#plt.savefig(\"../SMB_figs/simulated_RT_assay.svg\")\n",
        "plt.savefig(\"png/simulated_RT_assay_QNS120.png\")\n",
        "plt.savefig(\"svg/simulated_RT_assay_QNS120.svg\")\n",
        "plt.show()"
      ],
      "id": "865fe3b6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot simulate assay along with real data\n"
      ],
      "id": "20346b72"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# plot the data\n",
        "# plot the data\n",
        "plt.figure()\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"CTRL\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"CTRL\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"BMP4\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"BMP4\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "\n",
        "RT_to_plot = RT_post_size/RT_post_size[0,:]\n",
        "#plt.plot(RT_doses,RT_post_size/RT_post_size[0,:],'-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,0],'b-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,1],'-*', color='orange')\n",
        "\n",
        "plt.legend([\"CTRL\", \"B100\"])\n",
        "plt.xlabel(\"Dose (Gy)\")\n",
        "plt.ylabel(\"Normalised surving fraction\")\n",
        "plt.yscale('log')\n",
        "ticks = [0.01,0.02,0.05,0.1,0.2,0.5,1]\n",
        "ticks_str = list(map(str, ticks)) # Convert each number to a string\n",
        "plt.yticks(ticks, ticks_str)\n",
        "plt.savefig(\"png/simulated_dose_response_QNS120.png\")\n",
        "plt.savefig(\"svg/simulated_dose_response_QNS120.svg\")\n",
        "plt.show()"
      ],
      "id": "c3587233",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QNS108\n",
        "\n",
        "doubling time is 109.3591hrs according to this the growth should be \n",
        "\n",
        "$$\n",
        "    N(t) = N_0 2^{t/T}\n",
        "$$\n"
      ],
      "id": "f7eb0caa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "N = s0*2**(48/109.3591)\n",
        "print(\"Expected size of colon after 48hrs for GMB1a\")\n",
        "print(N)"
      ],
      "id": "5cd3e857",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cline = \"QNS108\"\n",
        "\n",
        "#pro_rate = m_s_estimate.x\n",
        "pro_rate = fitted_pro_rates[fitted_pro_rates[\"cline\"] == cline][\"pro_rate\"].iloc[0] # value from the fit\n",
        "\n",
        "t_final = t_rad + t_assay\n",
        "\n",
        "# Define proliferation rates for the diffent cell pops\n",
        "mv = mv_rho_scale*pro_rate*np.ones(n) \n",
        "ms = ms_mv_scale*mv[0]\n",
        "mv[n-1] = 0 \n",
        "\n",
        "\n",
        "# According to the RT data fits for QNS120 we get\n",
        "#alpha = 0.2175843971485717 / eta \n",
        "#beta =  8.702061194838374e-15 / eta\n",
        "\n",
        "# Assuming alpha/beta = 10 fixed\n",
        "alpha = 0.15131625 / eta\n",
        "beta = (0.15131625/10) / eta\n",
        "\n",
        "psi_values = [0,psi_fits[psi_fits[\"cline\"]==cline][\"Psi_10\"].iloc[0]] # different values of psi used in assay\n",
        "\n",
        "# set up time grid\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "nt = len(t)\n",
        "\n",
        "\n",
        "# set up array to store model solution\n",
        "u_all = []\n",
        "VS_all = []\n",
        "N_all = []\n",
        "\n",
        "\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        # set up array to store model solution\n",
        "        u = np.zeros((nt,n+1))\n",
        "        VS = np.zeros(nt)\n",
        "        N = np.zeros(nt)\n",
        "\n",
        "        # define IC\n",
        "        u[0,0] = s0\n",
        "        VS[0] = np.sum(u[0,1:n+1]) # sum the 1th to nth entries\n",
        "        N[0] = u[0,0] + VS[0]\n",
        "\n",
        "        i = 0\n",
        "        while t[i] < t_final:\n",
        "                if t[i] <= t_rad : \n",
        "                    Ps = Ps_min + (Ps_max - Ps_min)*(1 / (1 + psi_values[ipsi]*BMP4_dose))\n",
        "                else : \n",
        "                    Ps = Ps_max\n",
        "\n",
        "                u[i+1,:] = u[i,:] + dt * gmf.gsc_model_dudt(u[i,:],n,Ps,k,ms,mv,delta_s,delta_v)\n",
        "                # apply radiation\n",
        "                if t[i] == t_rad :\n",
        "                    u[i+1,:] = gmf.radiation(u[i+1,:],alpha,beta,eta,mu,d=RT_doses[j])\n",
        "                    RT_pre_size[j,ipsi] = np.sum(u[i,:])\n",
        "                    RT_pre_t[j,ipsi] = t[i]        \n",
        "                    RT_post_size[j,ipsi] = np.sum(u[i+1,:])\n",
        "                    RT_post_t[j,ipsi] = t[i+1]        \n",
        "                    \n",
        "                VS[i+1] = np.sum(u[i+1,1:n+1])\n",
        "                N[i+1] = u[i+1,0] + VS[i+1]\n",
        "                            \n",
        "                i = i + 1\n",
        "\n",
        "        u_all.append(u)\n",
        "        VS_all.append(VS)\n",
        "        N_all.append(N)\n",
        "        #print(\"Actuall size after 48hrs\")\n",
        "        #print(N[-2]) # need to print second last item as the last one has had RT applied\n",
        "\n",
        "print(\"Stem cell fraction just before RT\")\n",
        "print(1- VS[-2]/N[-2])    \n",
        "\n",
        "print(\"According to DLQ stem cell fraction should be\")\n",
        "print(0.97809831)"
      ],
      "id": "556bbb3c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axs = plt.subplots(2, sharex=True)\n",
        "w = 0\n",
        "BMP4_colors = list(mcolors.TABLEAU_COLORS)\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        axs[1].plot(t,1 - VS_all[w]/N_all[w], psi_colors[ipsi], alpha=0.25) \n",
        "        axs[0].plot(t,N_all[w],psi_colors[ipsi], alpha = 0.5)\n",
        "\n",
        "        axs[0].plot(RT_pre_t[j,ipsi],RT_pre_size[j,ipsi],'r*',label='_nolegend_')\n",
        "        axs[0].plot(RT_post_t[j,ipsi],RT_post_size[j,ipsi],'g*',label='_nolegend_')\n",
        "\n",
        "        w = w + 1\n",
        "\n",
        "axs[1].set(xlabel=\"Time (days)\")\n",
        "axs[1].set(ylabel=\"Stem fraction\")\n",
        "axs[0].set(ylabel=\"Tumour density\")\n",
        "fig.suptitle(\"Simulated RT assay\")\n",
        "leg = axs[0].legend([r\"$\\psi = 0$\",fr\"$\\psi = {psi_values[1]}$\"], loc='upper left')\n",
        "leg.legend_handles[0].set_color('tab:blue')\n",
        "leg.legend_handles[1].set_color('tab:orange')\n",
        "#leg.legend_handles[2].set_color('tab:green')\n",
        "#leg.legend_handles[3].set_color('tab:red')\n",
        "#leg.legend_handles[4].set_color('tab:purple')\n",
        "leg.legend_handles[0].set_alpha(1)\n",
        "leg.legend_handles[1].set_alpha(1)\n",
        "#leg.legend_handles[2].set_alpha(1)\n",
        "#leg.legend_handles[3].set_alpha(1)\n",
        "#leg.legend_handles[4].set_alpha(1)\n",
        "plt.tight_layout()\n",
        "#plt.savefig(\"../SMB_figs/simulated_RT_assay.svg\")\n",
        "plt.savefig(\"png/simulated_RT_assay_QNS108.png\")\n",
        "plt.savefig(\"svg/simulated_RT_assay_QNS108.svg\")\n",
        "plt.show()"
      ],
      "id": "89a6eba0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot simulate assay along with real data\n"
      ],
      "id": "9b96ae3a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# plot the data\n",
        "# plot the data\n",
        "plt.figure()\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"CTRL\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"CTRL\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"BMP4\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"BMP4\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "\n",
        "RT_to_plot = RT_post_size/RT_post_size[0,:]\n",
        "#plt.plot(RT_doses,RT_post_size/RT_post_size[0,:],'-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,0],'b-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,1],'-*', color='orange')\n",
        "\n",
        "plt.legend([\"CTRL\", \"B100\"])\n",
        "plt.xlabel(\"Dose (Gy)\")\n",
        "plt.ylabel(\"Normalised surving fraction\")\n",
        "plt.yscale('log')\n",
        "ticks = [0.01,0.02,0.05,0.1,0.2,0.5,1]\n",
        "ticks_str = list(map(str, ticks)) # Convert each number to a string\n",
        "plt.yticks(ticks, ticks_str)\n",
        "plt.savefig(\"png/simulated_dose_response_QNS108.png\")\n",
        "plt.savefig(\"svg/simulated_dose_response_QNS108.svg\")\n",
        "plt.show()"
      ],
      "id": "3f637406",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QNS315\n",
        "\n",
        "doubling time is 63.61046hrs according to this the growth should be \n",
        "\n",
        "$$\n",
        "    N(t) = N_0 2^{t/T}\n",
        "$$\n"
      ],
      "id": "6969e150"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "N = s0*2**(48/63.61046)\n",
        "print(\"Expected size of colon after 48hrs for GMB1a\")\n",
        "print(N)"
      ],
      "id": "f7a72552",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cline = \"QNS315\"\n",
        "\n",
        "#pro_rate = m_s_estimate.x\n",
        "pro_rate = fitted_pro_rates[fitted_pro_rates[\"cline\"] == cline][\"pro_rate\"].iloc[0] # value from the fit\n",
        "\n",
        "t_final = t_rad + t_assay\n",
        "\n",
        "# Define proliferation rates for the diffent cell pops\n",
        "mv = mv_rho_scale*pro_rate*np.ones(n) \n",
        "ms = ms_mv_scale*mv[0]\n",
        "mv[n-1] = 0 \n",
        "\n",
        "\n",
        "# According to the RT data fits for QNS120 we get\n",
        "#alpha = 8.633812961320722e-15 / eta \n",
        "#beta =  0.027575866247915973 / eta\n",
        "\n",
        "# Assuming alpha/beta = 10 fixed\n",
        "alpha = 0.0841315 / eta\n",
        "beta = (0.0841315/10) / eta\n",
        "\n",
        "psi_values = [0,psi_fits[psi_fits[\"cline\"]==cline][\"Psi_10\"].iloc[0]] # different values of psi used in assay\n",
        "\n",
        "# set up time grid\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "nt = len(t)\n",
        "\n",
        "\n",
        "# set up array to store model solution\n",
        "u_all = []\n",
        "VS_all = []\n",
        "N_all = []\n",
        "\n",
        "\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        # set up array to store model solution\n",
        "        u = np.zeros((nt,n+1))\n",
        "        VS = np.zeros(nt)\n",
        "        N = np.zeros(nt)\n",
        "\n",
        "        # define IC\n",
        "        u[0,0] = s0\n",
        "        VS[0] = np.sum(u[0,1:n+1]) # sum the 1th to nth entries\n",
        "        N[0] = u[0,0] + VS[0]\n",
        "\n",
        "        i = 0\n",
        "        while t[i] < t_final:\n",
        "                if t[i] <= t_rad : \n",
        "                    Ps = Ps_min + (Ps_max - Ps_min)*(1 / (1 + psi_values[ipsi]*BMP4_dose))\n",
        "                else : \n",
        "                    Ps = Ps_max\n",
        "\n",
        "                u[i+1,:] = u[i,:] + dt * gmf.gsc_model_dudt(u[i,:],n,Ps,k,ms,mv,delta_s,delta_v)\n",
        "                # apply radiation\n",
        "                if t[i] == t_rad :\n",
        "                    u[i+1,:] = gmf.radiation(u[i+1,:],alpha,beta,eta,mu,d=RT_doses[j])\n",
        "                    RT_pre_size[j,ipsi] = np.sum(u[i,:])\n",
        "                    RT_pre_t[j,ipsi] = t[i]        \n",
        "                    RT_post_size[j,ipsi] = np.sum(u[i+1,:])\n",
        "                    RT_post_t[j,ipsi] = t[i+1]        \n",
        "                    \n",
        "                VS[i+1] = np.sum(u[i+1,1:n+1])\n",
        "                N[i+1] = u[i+1,0] + VS[i+1]\n",
        "                            \n",
        "                i = i + 1\n",
        "\n",
        "        u_all.append(u)\n",
        "        VS_all.append(VS)\n",
        "        N_all.append(N)\n",
        "        #print(\"Actuall size after 48hrs\")\n",
        "        #print(N[-2]) # need to print second last item as the last one has had RT applied\n",
        "\n",
        "print(\"Stem cell fraction just before RT\")\n",
        "print(1- VS[-2]/N[-2])    \n",
        "\n",
        "print(\"According to DLQ stem cell fraction should be\")\n",
        "print(1)"
      ],
      "id": "addffb01",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axs = plt.subplots(2, sharex=True)\n",
        "w = 0\n",
        "BMP4_colors = list(mcolors.TABLEAU_COLORS)\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        axs[1].plot(t,1 - VS_all[w]/N_all[w], psi_colors[ipsi], alpha=0.25) \n",
        "        axs[0].plot(t,N_all[w],psi_colors[ipsi], alpha = 0.5)\n",
        "\n",
        "        axs[0].plot(RT_pre_t[j,ipsi],RT_pre_size[j,ipsi],'r*',label='_nolegend_')\n",
        "        axs[0].plot(RT_post_t[j,ipsi],RT_post_size[j,ipsi],'g*',label='_nolegend_')\n",
        "\n",
        "        w = w + 1\n",
        "\n",
        "axs[1].set(xlabel=\"Time (days)\")\n",
        "axs[1].set(ylabel=\"Stem fraction\")\n",
        "axs[0].set(ylabel=\"Tumour density\")\n",
        "fig.suptitle(\"Simulated RT assay\")\n",
        "leg = axs[0].legend([r\"$\\psi = 0$\",fr\"$\\psi = {psi_values[1]}$\"], loc='upper left')\n",
        "leg.legend_handles[0].set_color('tab:blue')\n",
        "leg.legend_handles[1].set_color('tab:orange')\n",
        "#leg.legend_handles[2].set_color('tab:green')\n",
        "#leg.legend_handles[3].set_color('tab:red')\n",
        "#leg.legend_handles[4].set_color('tab:purple')\n",
        "leg.legend_handles[0].set_alpha(1)\n",
        "leg.legend_handles[1].set_alpha(1)\n",
        "#leg.legend_handles[2].set_alpha(1)\n",
        "#leg.legend_handles[3].set_alpha(1)\n",
        "#leg.legend_handles[4].set_alpha(1)\n",
        "plt.tight_layout()\n",
        "#plt.savefig(\"../SMB_figs/simulated_RT_assay.svg\")\n",
        "plt.savefig(\"png/simulated_RT_assay_QNS315.png\")\n",
        "plt.savefig(\"svg/simulated_RT_assay_QNS315.svg\")\n",
        "plt.show()"
      ],
      "id": "f1fec801",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot simulate assay along with real data\n"
      ],
      "id": "a7b1e965"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# plot the data\n",
        "# plot the data\n",
        "plt.figure()\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"CTRL\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"CTRL\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"BMP4\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"BMP4\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "\n",
        "RT_to_plot = RT_post_size/RT_post_size[0,:]\n",
        "#plt.plot(RT_doses,RT_post_size/RT_post_size[0,:],'-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,0],'b-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,1],'-*', color='orange')\n",
        "\n",
        "plt.legend([\"CTRL\", \"B100\"])\n",
        "plt.xlabel(\"Dose (Gy)\")\n",
        "plt.ylabel(\"Normalised surving fraction\")\n",
        "plt.yscale('log')\n",
        "ticks = [0.01,0.02,0.05,0.1,0.2,0.5,1]\n",
        "ticks_str = list(map(str, ticks)) # Convert each number to a string\n",
        "plt.yticks(ticks, ticks_str)\n",
        "plt.savefig(\"png/simulated_dose_response_QNS315.png\")\n",
        "plt.savefig(\"svg/simulated_dose_response_QNS315.svg\")\n",
        "plt.show()"
      ],
      "id": "aef7a134",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## QNS657\n",
        "\n",
        "doubling time is 75.63042hrs according to this the growth should be \n",
        "\n",
        "$$\n",
        "    N(t) = N_0 2^{t/T}\n",
        "$$\n"
      ],
      "id": "0bb75b95"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "N = s0*2**(48/75.63042)\n",
        "print(\"Expected size of colon after 48hrs for GMB1a\")\n",
        "print(N)"
      ],
      "id": "f7ae6fac",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cline = \"QNS657\"\n",
        "\n",
        "#pro_rate = m_s_estimate.x\n",
        "pro_rate = fitted_pro_rates[fitted_pro_rates[\"cline\"] == cline][\"pro_rate\"].iloc[0] # value from the fit\n",
        "\n",
        "t_final = t_rad + t_assay\n",
        "\n",
        "# Define proliferation rates for the diffent cell pops\n",
        "mv = mv_rho_scale*pro_rate*np.ones(n) \n",
        "ms = ms_mv_scale*mv[0]\n",
        "mv[n-1] = 0 \n",
        "\n",
        "\n",
        "# According to the RT data fits for QNS120 we get\n",
        "#alpha = 0.06416341211391817 / eta \n",
        "#beta =  0.019133324269813796 / eta\n",
        "\n",
        "# Assuming alpha/beta = 10 fixed\n",
        "alpha = 0.10378728 / eta\n",
        "beta = (0.10378728/10) / eta\n",
        "\n",
        "psi_values = [0,psi_fits[psi_fits[\"cline\"]==cline][\"Psi_10\"].iloc[0]] # different values of psi used in assay\n",
        "\n",
        "# set up time grid\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "nt = len(t)\n",
        "\n",
        "\n",
        "# set up array to store model solution\n",
        "u_all = []\n",
        "VS_all = []\n",
        "N_all = []\n",
        "\n",
        "\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        # set up array to store model solution\n",
        "        u = np.zeros((nt,n+1))\n",
        "        VS = np.zeros(nt)\n",
        "        N = np.zeros(nt)\n",
        "\n",
        "        # define IC\n",
        "        u[0,0] = s0\n",
        "        VS[0] = np.sum(u[0,1:n+1]) # sum the 1th to nth entries\n",
        "        N[0] = u[0,0] + VS[0]\n",
        "\n",
        "        i = 0\n",
        "        while t[i] < t_final:\n",
        "                if t[i] <= t_rad : \n",
        "                    Ps = Ps_min + (Ps_max - Ps_min)*(1 / (1 + psi_values[ipsi]*BMP4_dose))\n",
        "                else : \n",
        "                    Ps = Ps_max\n",
        "\n",
        "                u[i+1,:] = u[i,:] + dt * gmf.gsc_model_dudt(u[i,:],n,Ps,k,ms,mv,delta_s,delta_v)\n",
        "                # apply radiation\n",
        "                if t[i] == t_rad :\n",
        "                    u[i+1,:] = gmf.radiation(u[i+1,:],alpha,beta,eta,mu,d=RT_doses[j])\n",
        "                    RT_pre_size[j,ipsi] = np.sum(u[i,:])\n",
        "                    RT_pre_t[j,ipsi] = t[i]        \n",
        "                    RT_post_size[j,ipsi] = np.sum(u[i+1,:])\n",
        "                    RT_post_t[j,ipsi] = t[i+1]        \n",
        "                    \n",
        "                VS[i+1] = np.sum(u[i+1,1:n+1])\n",
        "                N[i+1] = u[i+1,0] + VS[i+1]\n",
        "                            \n",
        "                i = i + 1\n",
        "\n",
        "        u_all.append(u)\n",
        "        VS_all.append(VS)\n",
        "        N_all.append(N)\n",
        "        #print(\"Actuall size after 48hrs\")\n",
        "        #print(N[-2]) # need to print second last item as the last one has had RT applied\n",
        "\n",
        "print(\"Stem cell fraction just before RT\")\n",
        "print(1- VS[-2]/N[-2])    \n",
        "\n",
        "print(\"According to DLQ stem cell fraction should be\")\n",
        "print(0.6823287)"
      ],
      "id": "5e3e06f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, axs = plt.subplots(2, sharex=True)\n",
        "w = 0\n",
        "BMP4_colors = list(mcolors.TABLEAU_COLORS)\n",
        "for ipsi in range(npsi) :\n",
        "    for j in range(nRT):\n",
        "\n",
        "        axs[1].plot(t,1 - VS_all[w]/N_all[w], psi_colors[ipsi], alpha=0.25) \n",
        "        axs[0].plot(t,N_all[w],psi_colors[ipsi], alpha = 0.5)\n",
        "\n",
        "        axs[0].plot(RT_pre_t[j,ipsi],RT_pre_size[j,ipsi],'r*',label='_nolegend_')\n",
        "        axs[0].plot(RT_post_t[j,ipsi],RT_post_size[j,ipsi],'g*',label='_nolegend_')\n",
        "\n",
        "        w = w + 1\n",
        "\n",
        "axs[1].set(xlabel=\"Time (days)\")\n",
        "axs[1].set(ylabel=\"Stem fraction\")\n",
        "axs[0].set(ylabel=\"Tumour density\")\n",
        "fig.suptitle(\"Simulated RT assay\")\n",
        "leg = axs[0].legend([r\"$\\psi = 0$\",fr\"$\\psi = {psi_values[1]}$\"], loc='upper left')\n",
        "leg.legend_handles[0].set_color('tab:blue')\n",
        "leg.legend_handles[1].set_color('tab:orange')\n",
        "#leg.legend_handles[2].set_color('tab:green')\n",
        "#leg.legend_handles[3].set_color('tab:red')\n",
        "#leg.legend_handles[4].set_color('tab:purple')\n",
        "leg.legend_handles[0].set_alpha(1)\n",
        "leg.legend_handles[1].set_alpha(1)\n",
        "#leg.legend_handles[2].set_alpha(1)\n",
        "#leg.legend_handles[3].set_alpha(1)\n",
        "#leg.legend_handles[4].set_alpha(1)\n",
        "plt.tight_layout()\n",
        "#plt.savefig(\"../SMB_figs/simulated_RT_assay.svg\")\n",
        "plt.savefig(\"png/simulated_RT_assay_QNS657.png\")\n",
        "plt.savefig(\"svg/simulated_RT_assay_QNS657.svg\")\n",
        "plt.show()"
      ],
      "id": "a1bfe028",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Plot simulate assay along with real data\n"
      ],
      "id": "00ab3a50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# plot the data\n",
        "# plot the data\n",
        "plt.figure()\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"CTRL\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"CTRL\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "plt.plot(rt_df[(rt_df[\"cline\"] == cline) & (rt_df[\"group\"] == \"BMP4\")][\"dose\"],rt_df[(rt_df[\"cline\"]== cline) & (rt_df[\"group\"] == \"BMP4\")][\"norm_pe\"] , 'o',alpha = 0.2)\n",
        "\n",
        "RT_to_plot = RT_post_size/RT_post_size[0,:]\n",
        "#plt.plot(RT_doses,RT_post_size/RT_post_size[0,:],'-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,0],'b-*')\n",
        "plt.plot(RT_doses, RT_to_plot[:,1],'-*', color='orange')\n",
        "\n",
        "plt.legend([\"CTRL\", \"B100\"])\n",
        "plt.xlabel(\"Dose (Gy)\")\n",
        "plt.ylabel(\"Normalised surving fraction\")\n",
        "plt.yscale('log')\n",
        "ticks = [0.01,0.02,0.05,0.1,0.2,0.5,1]\n",
        "ticks_str = list(map(str, ticks)) # Convert each number to a string\n",
        "plt.yticks(ticks, ticks_str)\n",
        "plt.savefig(\"png/simulated_dose_response_QNS657.png\")\n",
        "plt.savefig(\"svg/simulated_dose_response_QNS657.svg\")\n",
        "plt.show()"
      ],
      "id": "631c223c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Visualise psi values\n",
        "\n",
        "psi defines sensitivity to BMP4, it goes from 0,1.\n"
      ],
      "id": "353f2262"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# define constnts\n",
        "Ps_min = 0\n",
        "Ps_max = 1\n",
        "\n",
        "# Create data points\n",
        "x = np.arange(0, 0.1, 0.001)\n",
        "z = Ps_min + (Ps_max - Ps_min)* 1 / (1 + x*BMP4_dose)\n",
        "\n",
        "plt.figure(figsize=(7, 4.5))\n",
        "\n",
        "# Plot the curve\n",
        "plt.plot(x,z,'k', label = \"_nolegend_\")\n",
        "plt.xlabel(r\"$\\psi$\", fontsize = 14)\n",
        "plt.ylabel(r\"$P_s$\", fontsize = 14)\n",
        "plt.xticks(fontsize = 12)\n",
        "plt.yticks(fontsize = 12)\n",
        "\n",
        "# Define line styles and colors\n",
        "line_styles = ['-', '--', '-.', ':']\n",
        "colors = ['y', 'g', 'b', 'r', 'm']\n",
        "\n",
        "# Plotting\n",
        "for i, cline in enumerate(psi_fits[\"cline\"]):\n",
        "    psi = psi_fits[psi_fits[\"cline\"] == cline][\"Psi_10\"].iloc[0]\n",
        "    # Find the corresponding y value on the curve for the given psi\n",
        "    y_value = Ps_min + (Ps_max - Ps_min) * 1 / (1 + psi * BMP4_dose)\n",
        "    # Plot vertical line up to the curve\n",
        "    plt.plot([psi, psi], [0, y_value], linestyle=line_styles[i % len(line_styles)], color=colors[i % len(colors)], label=cline)\n",
        "    # Plot horizontal line back to the left\n",
        "    plt.plot([psi, 0], [y_value, y_value], linestyle=line_styles[i % len(line_styles)], color=colors[i % len(colors)])\n",
        "\n",
        "plt.xlim(left=-0.001)\n",
        "plt.ylim(bottom=0)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.savefig(\"png/psi_values_visualised.png\")\n",
        "plt.savefig(\"svg/psi_values_visualised.svg\")\n",
        "plt.show()"
      ],
      "id": "5efae2c5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For a varying BMP4 dose show the effect of psi\n"
      ],
      "id": "4f5a62e5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# define constnts\n",
        "Ps_min = 0\n",
        "Ps_max = 1\n",
        "\n",
        "\n",
        "# Create data points here x represents BMP4 dose.\n",
        "x = np.arange(0, 20, 0.001)\n",
        "\n",
        "# Define line styles and colors\n",
        "line_styles = ['-', '--', '-.', ':']\n",
        "colors = ['y', 'g', 'b', 'r', 'm']\n",
        "\n",
        "\n",
        "# Plotting\n",
        "for i, cline in enumerate(psi_fits[\"cline\"]):\n",
        "    psi = psi_fits[psi_fits[\"cline\"] == cline][\"Psi_10\"].iloc[0]\n",
        "    plt.plot(x,Ps_min + (Ps_max - Ps_min)* 1 / (1 + x*psi))\n",
        "\n",
        "plt.xlim(left=-0.001)\n",
        "plt.ylim(bottom=0)\n",
        "plt.xlabel(\"BMP4\", fontsize = 14)\n",
        "plt.ylabel(r\"$P_s$\", fontsize = 14)\n",
        "plt.xticks(fontsize = 12)\n",
        "plt.yticks(fontsize = 12)\n",
        "plt.legend(psi_fits[\"cline\"])\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "723c8da9",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\nicho\\anaconda3\\envs\\CGM_analysis\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}