{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Simulated BMP4 only virtual trial\n",
        "description: Simulate the model with parameter values drawn from real patient data with BMP4 only trial arm\n",
        "author: \n",
        "  - name: Nicholas Harbour\n",
        "  - name: Markus Owen\n",
        "format: \n",
        "  html:\n",
        "    embed-resources: true\n",
        "    code-fold: true\n",
        "    number-sections: true\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    date: now\n",
        "    date-modified: last-modified\n",
        "    date-format: \"MMMM DD, YYYY, HH:mm:ss\"\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "# import packages and define functions\n"
      ],
      "id": "49ffd9d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Import_packages\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "from scipy.stats import lognorm\n",
        "from numba import jit\n",
        "from sksurv.compare import compare_survival\n",
        "from sksurv.nonparametric import kaplan_meier_estimator"
      ],
      "id": "Import_packages",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "all functions are in: \"notebooks/gsc_model_functions.py\"\n"
      ],
      "id": "5f5e98b9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: import_functions\n",
        "\n",
        "import gsc_model_functions as gmf"
      ],
      "id": "import_functions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For this we need to load in the patient data and calculate the distribution params"
      ],
      "id": "c8b4f664"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: Load_the_real_data\n",
        "\n",
        "# load in the patient survival data\n",
        "historic_df = pd.read_csv(\"Rho_D_data.csv\")\n",
        "censored_str = \"Censorship (1=censored)\"\n",
        "survival_str = \"Overall Survival\"\n",
        "# only keep patients that weren't censored\n",
        "historic_df = historic_df[historic_df[censored_str] == 0]\n",
        "# cut off patients that had very high proliferation rate\n",
        "historic_df = historic_df[historic_df[\"PIHNA rho\"] < 100 ] \n",
        "historic_df[censored_str] = True\n",
        "\n",
        "# fit distribution to the data\n",
        "dist_name = 'lognorm'  # Replace with the desired distribution name\n",
        "dist = getattr(stats, dist_name)\n",
        "params = dist.fit(historic_df[\"PIHNA rho\"])\n",
        "    \n",
        "shape = params[0]\n",
        "loc = params[1]\n",
        "scale = params[-1]"
      ],
      "id": "Load_the_real_data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Virtual clinical trial: resection + BMP4\n",
        "\n",
        "Simulate the model for a cohort of virtual patients who undergo our novel proposed treatment of BMP4 following resection."
      ],
      "id": "651ce0c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: all_model_sims\n",
        "\n",
        "### import params\n",
        "from gsc_model_params import *\n",
        "\n",
        "### override some parameters ###\n",
        "Ps_min = 0.0 # Min probability of self renewal\n",
        "\n",
        "# initial conditions\n",
        "s0 = 0.001 # Initial GSCs\n",
        "u0 = np.zeros(n+1)\n",
        "u0[0] = s0\n",
        "\n",
        "# or initial conditions\n",
        "n0 = 0.001\n",
        "s0 = 0.01*n0 # fraction of initial tumour\n",
        "v_ratio = 1.95 # ratio between successive compartments\n",
        "v0 = ((n0-s0)*(v_ratio-1)/(v_ratio**n-1))*(v_ratio**np.arange(n))\n",
        "u0 = np.zeros(n+1)\n",
        "u0[0] = s0\n",
        "u0[1:] = v0\n",
        "\n",
        "# simulate for a range of psi values\n",
        "psi_values = [0,2,5,50,100]\n",
        "\n",
        "n_patients = 200 # set the number of patients to simulate\n",
        "n_patients = len(historic_df) # set the number of patients to simulate\n",
        "surv_final = np.zeros([n_patients,len(psi_values)+1]) # store the final survival time for each patient and for each psi value\n",
        "\n",
        "# set up time grid\n",
        "t_final = 8000\n",
        "dt = 0.01\n",
        "t = np.arange(0, t_final+dt/2, dt)\n",
        "\n",
        "# generate rhos as sample from lognormal distiution\n",
        "np.random.seed(1)\n",
        "pro_rates_sampled = np.sort(lognorm.rvs(shape, loc , scale=scale, size=n_patients))\n",
        "\n",
        "rad_on = 0 # RT off\n",
        "BMP4_on = 1 # BMP4 on\n",
        "resect_on = 1 # resection on\n",
        "\n",
        "alphas = np.zeros(n_patients) # to store the set of alphas used\n",
        "\n",
        "N_save_set = []\n",
        "u_save_set = []\n",
        "t_save_set = []\n",
        "s_save_set = []\n",
        "\n",
        "# we want each patient to have a unique random seed so that across all simulations they get the same series of random numbers\n",
        "random_seeds = np.arange(0,n_patients,1)\n",
        "\n",
        "q = 0 # loop variable\n",
        "\n",
        "for psi in psi_values:\n",
        "    N_save = [] # save the total tumor size for each virtual patient \n",
        "    u_save = [] # save the total tumor size for each virtual patient \n",
        "    t_save = [] # save the time for each virtual patient\n",
        "    s_save = [] # save stem cell variable\n",
        "    save_detect_size = [] # save the size of the tumor at detection\n",
        "    save_detect_t = [] # save the time of detection\n",
        "\n",
        "\n",
        "    for j in range(n_patients):\n",
        "    \n",
        "        np.random.seed(random_seeds[j]) # patient specific random seed\n",
        "        mv = mv_rho_scale*pro_rates_sampled[j]*np.ones(n) \n",
        "        ms = ms_mv_scale*mv[0]\n",
        "        mv[n-1] = 0 \n",
        "    \n",
        "        # calc alpha as proportional to rho\n",
        "        alpha = gmf.calc_alpha_from_rho(pro_rates_sampled[j])\n",
        "        beta = gmf.calc_beta(alpha)\n",
        "        alphas[j] = alpha\n",
        "     \n",
        "        u,N,VS,t,m,B,detect_size,detect_t,_,_ = gmf.simulate_model(t_final,dt,u0,psi,Ps_max,Ps_min,n,k,ms,mv,delta_s,delta_v,delta_m,delta_b,C,u_s,n_RT_repeat,n_RT_cycles,rad_on,alpha,beta,eta,mu,t_RT_wait,t_RT_interval,detect_threshold,detection_sensitivity,death_sensitivity,lam,resection_to_RT_delay,BMP4_on,death_threshold,resect_on,resect_fraction,random_seeds[j])\n",
        "    \n",
        "        surv_final[j,q+1] =  t[-1]-detect_t\n",
        "        N_save.append(N)\n",
        "        u_save.append(u)\n",
        "        t_save.append(t)\n",
        "        s_save.append(u[:,0])\n",
        "        save_detect_size.append(detect_size)\n",
        "        save_detect_t.append(detect_t)\n",
        "\n",
        "    N_save_set.append(N_save)\n",
        "    u_save_set.append(u_save)\n",
        "    t_save_set.append(t_save)\n",
        "    s_save_set.append(s_save)\n",
        "    q = q + 1"
      ],
      "id": "all_model_sims",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example tumour trajectories: Resection + RT vs Resection + BMP4\n",
        "\n",
        "Plot representative model outputs for a cohort of virtual patients who undergo resection alone (entry 0 in saved data); and for Resection + BMP4 for a fixed psi value of 100 (entry 4 in saved data). \n"
      ],
      "id": "f252bc57"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-BMP4-only-model-sims\n",
        "#| fig-cap: 'Five example simulations showing tumour growth, detection, resection and the effect of resection alone (solid curves) and resection + BMP4 (dashed curves). BMP4 delivered via mesenchymal stem cells at the time of resection increases the rate of differentiation of stem cells (GSCs) to TCs, so the stem cell fraction drops making residual tumour more susceptible to radiotherapy, prolonging survival.'\n",
        "#| fig-alt: Five example simulations showing tumour growth\n",
        "\n",
        "n_patients_to_plot = 5\n",
        "\n",
        "colours = [\"tab:blue\", \"tab:orange\", \"tab:green\", \"tab:red\", \"tab:purple\", \"tab:brown\", \"tab:pink\", \"tab:gray\", \"tab:olive\", \"tab:cyan\"]\n",
        "\n",
        "fig, (ax1,ax2,ax3) = plt.subplots(3, sharex=True) \n",
        "q = 0 # loop through colors\n",
        "\n",
        "index_to_plot = [30, 50, 90, 130, 190]\n",
        "\n",
        "for i in index_to_plot:\n",
        "    ax1.plot(t_save_set[0][i],N_save_set[0][i],color=colours[q],alpha=0.5)\n",
        "    ax1.plot(t_save_set[4][i],N_save_set[4][i],'--',color=colours[q],alpha=0.5)\n",
        "\n",
        "    ax2.plot(t_save_set[0][i],s_save_set[0][i],color=colours[q],alpha=0.5)\n",
        "    ax2.plot(t_save_set[4][i],s_save_set[4][i],'--',color=colours[q],alpha=0.5)\n",
        "\n",
        "    ax3.plot(t_save_set[0][i],s_save_set[0][i]/N_save_set[0][i],color=colours[q],alpha=0.5)\n",
        "    ax3.plot(t_save_set[4][i],s_save_set[4][i]/N_save_set[4][i],'--',color=colours[q],alpha=0.5)\n",
        "\n",
        "    q = q+1\n",
        "\n",
        "    if save_detect_t[i] > 0:\n",
        "        ax1.plot(save_detect_t[i],save_detect_size[i],'r*')\n",
        "        ax2.plot(save_detect_t[i],s_save[i][t_save[i]==save_detect_t[i]],'r*')\n",
        "        ax3.plot(save_detect_t[i],s_save[i][t_save[i]==save_detect_t[i]]/save_detect_size[i],'r*')\n",
        "\n",
        "ax1.set_xlim([0, 2000])\n",
        "#ax1.set_ylim([0, 0.55])\n",
        "ax1.set(ylabel='Tumor size')\n",
        "\n",
        "ax2.set_yscale('log')\n",
        "#ax2.set_ylim([0, 0.0012])\n",
        "ax2.set(ylabel='Stem cells')\n",
        "\n",
        "# ax3.set_ylim([0, 0.06])\n",
        "ax3.set(xlabel='Time (days)')\n",
        "ax3.set(ylabel='Stem cell fraction')\n",
        "\n",
        "fig.suptitle(\"N, s and fraction of GSCs\")\n",
        "plt.show()"
      ],
      "id": "fig-BMP4-only-model-sims",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Example tumour trajectories\n",
        "\n",
        "Plot represenative examples of tumour growth\n"
      ],
      "id": "345eb622"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-BMP4-only-model-sims2\n",
        "#| fig-cap: Caption\n",
        "#| fig-alt: Alternative text\n",
        "\n",
        "n_patients_to_plot = 5\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "for i in range(0,n_patients,int(np.floor(n_patients/(n_patients_to_plot-1)))):\n",
        "    print(i)\n",
        "    plt.plot(t_save[i],N_save[i],color='grey',alpha=0.5)\n",
        "    plt.plot(save_detect_t[i],save_detect_size[i],'r*')\n",
        "\n",
        "plt.xlim(0,2000)\n",
        "plt.xlabel('Time (days)')\n",
        "plt.ylabel('Tumor size')\n",
        "plt.show()"
      ],
      "id": "fig-BMP4-only-model-sims2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Calculate statistical difference between survival between all the psi value groups.\n"
      ],
      "id": "7b171397"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "plot the KM survival curves\n"
      ],
      "id": "1ea5618a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-BMP4_only_KM\n",
        "#| fig-cap: Simulated survival curves for BMP4 only\n",
        "#| fig-alt: Alternate text\n",
        "\n",
        "\n",
        "survival_BMP4_df = pd.DataFrame(surv_final, columns=['Status','Survival_time_sim', 'Survival_time_psi_2', 'Survival_time_psi_5', 'Survival_time_psi_50', 'Survival_time_psi_100'])\n",
        "\n",
        "# has to be set to boolean not just integer\n",
        "survival_BMP4_df['Status'] = True\n",
        "\n",
        "\n",
        "time, survival_prob, conf_int = kaplan_meier_estimator(survival_BMP4_df[\"Status\"], survival_BMP4_df[\"Survival_time_sim\"], conf_type=\"log-log\")\n",
        "plt.step(time, survival_prob, where=\"post\")\n",
        "plt.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step=\"post\",  label='_nolegend_')\n",
        "time, survival_prob, conf_int = kaplan_meier_estimator(survival_BMP4_df[\"Status\"], survival_BMP4_df[\"Survival_time_psi_2\"], conf_type=\"log-log\")\n",
        "plt.step(time, survival_prob, where=\"post\")\n",
        "plt.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step=\"post\",  label='_nolegend_')\n",
        "time, survival_prob, conf_int = kaplan_meier_estimator(survival_BMP4_df[\"Status\"], survival_BMP4_df[\"Survival_time_psi_5\"], conf_type=\"log-log\")\n",
        "plt.step(time, survival_prob, where=\"post\")\n",
        "plt.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step=\"post\",  label='_nolegend_')\n",
        "time, survival_prob, conf_int = kaplan_meier_estimator(survival_BMP4_df[\"Status\"], survival_BMP4_df[\"Survival_time_psi_50\"], conf_type=\"log-log\")\n",
        "plt.step(time, survival_prob, where=\"post\")\n",
        "plt.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step=\"post\",  label='_nolegend_')\n",
        "time, survival_prob, conf_int = kaplan_meier_estimator(survival_BMP4_df[\"Status\"], survival_BMP4_df[\"Survival_time_psi_100\"], conf_type=\"log-log\")\n",
        "plt.step(time, survival_prob, where=\"post\")\n",
        "plt.fill_between(time, conf_int[0], conf_int[1], alpha=0.25, step=\"post\",  label='_nolegend_')\n",
        "plt.xlim(0, 3000)\n",
        "plt.ylim(0, 1)\n",
        "plt.ylabel(\"Survival\")\n",
        "plt.xlabel(\"Time (day)\")\n",
        "plt.title(r\"Simulated survival BMP4 only\")\n",
        "plt.legend([r\"Virtual control\", r\"Simulated BMP4 $\\psi = 2$\",\n",
        "            r\"Simulated BMP4 $\\psi = 5$\", r\"Simulated BMP4 $\\psi = 50$\", r\"Simulated BMP4 $\\psi = 100$\"])\n",
        "plt.show()"
      ],
      "id": "fig-BMP4_only_KM",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\nicho\\anaconda3\\envs\\CGM_analysis\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}